import code.plugin.config.Maven

apply plugin: 'maven-publish'
apply plugin: 'signing'

task generateSourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    setArchiveClassifier("sources")
}

// read local properties
File localPropsFile = project.rootProject.file('local.properties')
if (localPropsFile.exists()) {
    Properties p = new Properties()
    new FileInputStream(localPropsFile).withCloseable { is ->
        p.load(is)
    }
    p.each { name, value ->
        ext[name] = value
    }
}

//发布前先执行 clean
publish.dependsOn clean

publishing {
    //maven配置参数
    repositories {
        maven {
            name = "mavenCentral"
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            // You only need this if you want to publish snapshots, otherwise just set the URL
            // to the release repo directly
            url = Maven.version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username sonatypeUsername
                password sonatypePassword
            }
        }
    }
    publications {
        firebase(MavenPublication) {
            groupId = Maven.groupId//公司域名
            artifactId = Maven.artifactFirebaseId//该aar包的名称
            version = Maven.version//版本号
            // 必须有这个 否则不会上传AAR包
            afterEvaluate { artifact(tasks.getByName("bundleFirebaseReleaseAar")) }
            // 必须是多渠道，需要指定aar路径
            //afterEvaluate { artifact("build/outputs/aar/app-debug.aar") }
            // 上传source，这样使用方可以看到方法注释
            artifact generateSourcesJar
            // pom文件中声明依赖，从而传递到使用方
            pom {
                name = Maven.sdkName
                description = Maven.sdkDescription
                // If your project has a dedicated site, use its URL here
                url = Maven.homePage
                licenses {
                    license {
                        //协议类型，一般默认Apache License2.0的话不用改：
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        name = Maven.developerName
                        email = Maven.developerEmail
                    }
                }
                // Version control info, if you're using GitHub, follow the format as seen here
                scm {
                    //修改成你的Git地址：
                    connection = 'scm:' + Maven.repositoriesSSH
                    developerConnection = 'scm:' + Maven.repositoriesSSH
                    //分支地址：
                    url = Maven.branchPage
                }
                withXml { a ->
                    def dependenciesNode = asNode().appendNode('dependencies')
                    configurations.implementation.allDependencies.each {
                        // 避免出现空节点或 artifactId=unspecified 的节点
                        if ((it.group != null && it.group != "unspecified")
                                && (it.name != null && it.name != "unspecified")
                                && (it.version != null && it.version != "unspecified")) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                            dependencyNode.appendNode('scope', 'implementation')
                        }
                    }
                }
            }
        }
        vest(MavenPublication) {
            groupId = Maven.groupId//公司域名
            artifactId = Maven.artifactVestId//该aar包的名称
            version = Maven.version//版本号
            // 必须有这个 否则不会上传AAR包
            afterEvaluate { artifact(tasks.getByName("bundleVestReleaseAar")) }
            // 必须是多渠道，需要指定aar路径
            //afterEvaluate { artifact("build/outputs/aar/app-debug.aar") }
            // 上传source，这样使用方可以看到方法注释
            artifact generateSourcesJar
            // pom文件中声明依赖，从而传递到使用方
            pom {
                name = Maven.sdkName
                description = Maven.sdkDescription
                // If your project has a dedicated site, use its URL here
                url = Maven.homePage
                licenses {
                    license {
                        //协议类型，一般默认Apache License2.0的话不用改：
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        name = Maven.developerName
                        email = Maven.developerEmail
                    }
                }
                // Version control info, if you're using GitHub, follow the format as seen here
                scm {
                    //修改成你的Git地址：
                    connection = 'scm:' + Maven.repositoriesSSH
                    developerConnection = 'scm:' + Maven.repositoriesSSH
                    //分支地址：
                    url = Maven.branchPage
                }
                withXml { a ->
                    def dependenciesNode = asNode().appendNode('dependencies')
                    configurations.implementation.allDependencies.each {
                        // 避免出现空节点或 artifactId=unspecified 的节点
                        if ((it.group != null && it.group != "unspecified")
                                && (it.name != null && it.name != "unspecified")
                                && (it.version != null && it.version != "unspecified")) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                            dependencyNode.appendNode('scope', 'implementation')
                        }
                    }
                }
            }
        }
    }
}
signing {
    sign publishing.publications
}